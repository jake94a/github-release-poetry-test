# build and deploy the python package

name: issue release

on:
  push:
    branches:
      - "main"
    paths:
      - pyproject.toml
      - .github/workflows/issue_release.yaml
  workflow_dispatch:

## BUILD
# checkout the most recent commit
# set up poetry
# install keyrings for gcloud
# run poetry build
# run poetry publish

jobs:
  build:
    # auth to gcloud requires these permissions
    permissions:
      contents: "write"
      id-token: "write"
      pull-requests: "write"
    runs-on: ubuntu-20.04
    # env:
    #   GAR_REPO: ${{ secrets.GCP_BPS_DEPS_REPO }}
    #   GITHUB_DEPLOYER_SA: github-deployer@${{ secrets.GOOGLE_ID }}.iam.gserviceaccount.com
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Version
        run: |
          PACKAGE_VERSION=$(grep -m  1 'version =' pyproject.toml | grep -oP '(?<=")[^"]*(?=")')
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Check for matching release version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release list

      # - name: issue release
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #   run: |
      #     gh release create -t ${{ env.PACKAGE_VERSION }} "$(date +%Y%m%d%H%M%S)" --generate-notes

      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.10.9"

      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-google-cloud-platform
      # auth to GCloud as a service account (could use a real user, but SA allow least-privilege)
      #   - name: Authenticate to Google Cloud
      #     uses: google-github-actions/auth@v0.8.1
      #     id: gsm-auth
      #     with:
      #       workload_identity_provider: projects/${{ secrets.ENTERPRISE_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-staging/providers/github-staging
      #       service_account: ${{ env.GITHUB_DEPLOYER_SA }}

      # - name: Install Poetry
      #   run: |
      #     curl -sSL https://install.python-poetry.org | python3 -

      # - name: set up env
      #   env:
      #     GAR_REPO: ${{ env.GAR_REPO }}
      #   run: |
      #     poetry self add keyrings.google-artifactregistry-auth
      #     poetry config repositories.gcp $GAR_REPO

      # - name: test build and publish
      #   run: |
      #     poetry build
      #     poetry publish --repository gcp --skip-existing
